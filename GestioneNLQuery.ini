; Gestione Navigazione Laghi Query File

[query]

salRotte="select routes.id idRotta, routes.description,
					routes.id_state id_stato_della_rotta, route_states.description stato_della_rotta,
					coalesce(counter.acquisizioni,0) acquisizioni,
					coalesce(counter.in_acquisizione,0) in_acquisizione,
					coalesce(counter.acquisite,0) acquisite,
					coalesce(counter.non_valide,0) non_valide,
					coalesce(counter.elaborate,0) elaborate
					from routes
					left join (select count(*) as acquisizioni, surveys.id_route id_route,
					sum (case when surveys.id_state=1 then 1 else 0 end) in_acquisizione,
					sum (case when surveys.id_state=2 then 1 else 0 end) acquisite,
					sum (case when surveys.id_state=3 then 1 else 0 end) non_valide,
					sum (case when surveys.id_state=4 then 1 else 0 end) elaborate
					from surveys
					group by surveys.id_route) counter on counter.id_route =  routes.id
					inner join route_states on route_states.id=routes.id_state order by routes.description asc";


salGeoJSONRotte = "SELECT public.ST_AsGeoJSON(
										public.ST_MakeLine(
										public.ST_SetSRID(public.ST_Point(gps.lng::FLOAT, gps.lat::FLOAT),4326)
										ORDER BY gps.id)) geojson, gps.uuid,
										s.id_state status, to_char(s.date_start, 'DD-Mon-YYYY HH24:MI') date_start,
										coalesce(to_char(s.date_end, 'DD-Mon-YYYY HH24:MI'), 'in acquisizione') date_end
										FROM sailing_lakes.routes r
										INNER JOIN sailing_lakes.surveys s on s.id_route = r.id
										INNER JOIN sailing_lakes.survey_points gps on s.uuid = gps.uuid
										WHERE r.id = :id_route
										GROUP BY gps.uuid, s.id_state, s.date_start, s.date_end";

salGeoJSONRottaMedia = "SELECT public.ST_AsGeoJSON(r.geom) geojson, r.description
												from sailing_lakes.routes r
											 	where r.id = :id_route
											 	and r.geom is not null";

salGeoJsonMeanSections = "SELECT public.ST_AsGeoJSON(rs.geom) geojson, r.description
											 from sailing_lakes.route_sections rs
											 inner join sailing_lakes.routes r on r.id = rs.id_route
											 where rs.id_route = :id_route
											 and rs.geom is not null";


salGeoJsonHarbors = "SELECT r.prog,
										hs.description name_start,
										public.ST_AsGeoJSON(hs.geom_pier) geojson_start,
										he.description name_end,
										public.ST_AsGeoJSON(he.geom_pier) geojson_end
										FROM sailing_lakes.route_sections r
										INNER JOIN sailing_lakes.harbors hs on hs.id = r.id_start_harbor
										INNER JOIN sailing_lakes.harbors he on he.id = r.id_end_harbor
										WHERE r.id_route = :id_route
										ORDER BY prog";

searchGtfsById = "select i_idgtfsworks AS ID,
				 		sz_lago AS LAGO,
				 		sz_nomearchivio AS NOME_ARCHIVIO,
				 		TO_CHAR(dt_datacaricamento, 'dd-MM-yyyy HH24:MI:SS') AS DATA_CARICAMENTO,
				 		i_stato AS STATO, i_esito AS ESITO,
				 		sz_errore AS ERRORE,
				 		dt_lastupdate AS LAST_UPDATE
				 	FROM gtfs_works where i_idgtfsworks = :id";

getStatoGtfs = "select i_stato AS STATO, i_esito AS ESITO FROM gtfs_works where i_idgtfsworks = :id";

getLogGtfs = "select level,
			 		 TO_CHAR(timelog, 'dd-MM-yyyy HH24:MI:SS') timelog,
					 message
		 		FROM gtfs_logs where fk_gtfswork = :id order by timelog desc";

getFileGtfsUploaded = "select
					  		i_idgtfsworks AS ID,
					  		sz_lago AS LAGO,
					  		sz_nomearchivio AS NOME_ARCHIVIO,
					  		TO_CHAR(dt_datacaricamento, 'dd-MM-yyyy HH24:MI:SS') AS DATA_CARICAMENTO,
						  	i_stato AS STATO, i_esito AS ESITO,
			  			  	sz_errore AS ERRORE,
					  		TO_CHAR(dt_lastupdate, 'dd-MM-yyyy HH24:MI:SS') AS LAST_UPDATE
				  		FROM gtfs_works
				  		ORDER BY i_idgtfsworks desc ";

insertGTFS = "INSERT INTO gtfs_works (sz_lago, sz_nomearchivio, dt_datacaricamento, i_stato, i_esito, sz_errore, dt_lastupdate)
							  VALUES (:sz_lago, :sz_nomearchivio, current_timestamp, 0, -1, '', current_timestamp) RETURNING i_idgtfsworks AS ID ";

[queryRmModel]

login= "SELECT id FROM users WHERE username=:username and password=:password";

getRoutes = "SELECT r.id id_rotta, r.description descr_rotta FROM routes r WHERE r.id_state < 3 AND r.id_user = :id_user ORDER BY r.description asc";

insertSurvey = "INSERT INTO surveys (uuid, id_user, id_route, date_start, id_state)
						 VALUES (:uuid, :idUser, :idRoute, (to_timestamp(:startDate) at time zone 'Europe/Rome'), 1)";

stopSurvey = "UPDATE surveys SET date_end = (to_timestamp(:endDate) at time zone 'Europe/Rome'), id_state = 2 WHERE uuid = :uuid";

addCoordinate = "INSERT into survey_points (uuid, id, lat, lng, date_point)
															VALUES(:uuid, :id, :lat, :lng, (to_timestamp(:date_point) at time zone 'Europe/Rome'))";

deleteSurveyPoints = "DELETE FROM survey_points WHERE uuid = :uuid";

deleteSurvey = "DELETE FROM surveys WHERE uuid = :uuid";
